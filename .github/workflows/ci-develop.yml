name: Test by 'develop'
on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop


jobs:

  prep-testbed_unit-test:
#    name: Prepare all unit test items
    uses: ./.github/workflows/prepare_test_items.yaml
    with:
      shell_path: scripts/ci/get-unit-test-paths.sh
      shell_arg: unix
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v3
#      - id: set-matrix
#        run: |
#          sudo apt-get install jq
#          echo "::set-output name=matrix::$(bash scripts/ci/get-unit-test-paths.sh unix)"
#    outputs:
#      matrix: ${{ steps.set-matrix.outputs.matrix }}
#      - uses: ./.github/workflows/prepare_test_items.yaml
#        id: set-matrix
#        with:
#          shell_path: scripts/ci/get-unit-test-paths.sh
#          shell_arg: unix
#          output_matrix_path: ${{ steps.set-matrix.outputs.matrix }}


  run_unit-test:
#    name: Run all unit test items
    needs: prep-testbed_unit-test
    uses: ./.github/workflows/run_test_items_via_pytest.yaml
    with:
      test_type: unit-test
      all_test_items_paths: ${{needs.prep-testbed_unit-test.outputs.all_test_items}}

#    name: Run all unit test items
#    needs: prep-testbed_unit-test
#    runs-on: ${{ matrix.os }}
#
#    strategy:
#      matrix:
#        python-version: [3.6,3.7,3.8,3.9,'3.10']
#        os: [ubuntu-18.04,ubuntu-20.04,ubuntu-22.04, macos-10.15,macos-11,macos-12]
#        exclude:
#          - os: ubuntu-18.04
#            python-version: 3.6
#          - os: ubuntu-18.04
#            python-version: 3.9
#          - os: ubuntu-18.04
#            python-version: '3.10'
#          - os: ubuntu-20.04
#            python-version: 3.8
#          - os: ubuntu-20.04
#            python-version: 3.9
#          - os: ubuntu-22.04
#            python-version: 3.6
#          - os: macos-10.15
#            python-version: 3.6
#          - os: macos-10.15
#            python-version: 3.8
#          - os: macos-latest
#            python-version: 3.6
#          - os: macos-latest
#            python-version: 3.9
##        test-path: ${{fromJson(needs.prep-testbed_unit-test.outputs.matrix)}}
#        test-path: ${{fromJson(needs.prep-testbed_unit-test.outputs.all_test_items)}}
#
#    steps:
#      - uses: actions/checkout@v2
#
#      - name: Install Python ${{ matrix.python-version }}
#        uses: actions/setup-python@v2
#        with:
#          python-version: ${{ matrix.python-version }}
#
##      - name: Install dependencies by cloning from GitHub MultiRunnable
##        run: |
##          git clone https://github.com/Chisanan232/multirunnable.git -b master ./multirunnable
##          sudo python ./multirunnable/setup.py install
##          pip install -r ./multirunnable/dev-requirements.txt
#
#      - name: Install Python dependencies
#        run: |
#          python -m pip install --upgrade pip
#          pip install -U pip
#          pip install -U -r ./requirements/requirements.txt
#          pip install -U -r ./requirements/requirements-test.txt
#
#      - name: Run tests with pytest
#        run: pytest ${{ matrix.test-path }}
#        continue-on-error: true
#
#      - name: Rename the code coverage result file
#        run: mv ./.coverage ./.coverage.unit-test.${{ matrix.os }}-${{ matrix.python-version }}
#
#      - name: Upload code coverage result file
#        uses: actions/upload-artifact@v3
#        with:
#          name: coverage
#          path: .coverage.unit-test.${{ matrix.os }}-${{ matrix.python-version }}
#          if-no-files-found: error


  unit-test_codecov:
#    name: Organize and generate the testing report and upload it to Codecov
    needs: [run_unit-test]
    uses: ./.github/workflows/upload_test_report_to_codecov.yaml
    with:
      test_type: unit-test
      codecov_token: ${{ secrets.CODECOV_TOKEN }}
      codecov_files: ./coverage.xml # optional
      codecov_flags: unittests
      codecov_name: smoothcrawler-cluster_github-actions_test # optional

#    needs: [unit-test]
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v2
#
#      - name: Download code coverage result file
#        uses: actions/download-artifact@v3
#        with:
#          name: coverage
#          path: .coverage.unit-test*
#
#      - name: Setup Python 3.10 in Ubuntu OS
#        uses: actions/setup-python@v2
#        with:
#          python-version: '3.10'
#
#      - name: Install Python tool 'coverage'
#        run: |
#          python3 -m pip install --upgrade pip
#          pip3 install -U pip
#          pip3 install coverage
#
#      - name: Combine all code coverage result files
#        run: coverage combine .coverage.*
#
#      - name: Report testing coverage of project code
#        run: coverage report -m
#
#      - name: Generate testing report for Codacy
#        run: coverage xml
#
#      - name: Upload coverage report to platform Codecov
#        uses: codecov/codecov-action@v3
#        with:
#          token: ${{ secrets.CODECOV_TOKEN }} # not required for public repos
#          files: ./coverage.xml # optional
#          flags: unittests # optional
#          name: smoothcrawler-cluster_github-actions_test # optional
#          fail_ci_if_error: true # optional (default = false)
#          verbose: true # optional (default = false)
#
#      - name: Upload testing coverage report
#        uses: actions/upload-artifact@v3
#        with:
#          name: project_coverage_report
#          path: coverage.xml
#          if-no-files-found: error


  codacy_finish:
#    name: Upload test report to Codacy to analyse and record code quality
    needs: [unit-test_codecov]
    uses: ./.github/workflows/upload_code_report_to_codacy.yaml
    with:
      download_path: ./
      codacy_token: ${{ secrets.CODACY_PROJECT_TOKEN }}

#    needs: unit-test_codecov
#    runs-on: ubuntu-latest
#    steps:
#      - name: Download testing coverage report
#        uses: actions/download-artifact@v3
#        with:
#          name: project_coverage_report
##          path: ./coverage.xml
#          path: ./
#
#      - name: Generate testing report for Codacy
#        run: mv ./coverage.xml ./cobertura.xml
#
#      - name: Upload testing report to Codacy
#        uses: codacy/codacy-coverage-reporter-action@v1
#        with:
#          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
#          # or
#          # api-token: ${{ secrets.CODACY_API_TOKEN }}
#          coverage-reports: cobertura.xml

