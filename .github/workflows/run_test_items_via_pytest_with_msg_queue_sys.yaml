#################################################################################################################################
#
# Workflow Description:
#     Run testing by specific type with all test items via PyTest and generate its testing
#     coverage report (it would save reports by 'actions/upload-artifact@v3').
#
# Workflow input parameters:
#     * test_type: The testing type. In generally, it only has 2 options: 'unit-test' and 'integration-test'.
#     * all_test_items_paths: The target paths of test items under test.
#     * setup_http_server: If it's true, it would set up and run HTTP server for testing.
#     * http_server_host: The host IPv4 address of HTTP server.
#     * http_server_port: The port number of HTTP server.
#     * http_server_app_module: The module path of HTTP server.
#     * http_server_enter_point: The object about the web application.
#     * debug_mode: For debug, so it's matrix would one has os: ubuntu-22.04 & python-version: '3.10'.
#     * env_file: The .env format file path. CI process would load and set this value in the current runtime environment to use.
#
# Workflow running output:
#     No, but it would save the testing coverage reports to provide after-process to organize and record.
#
#     * Upload-Artifact:
#         * coverage: The test coverage report which be generated by PyTest, and it's recorded after run test done.
#                           The file name format would be .coverage.<test type>.<runtime os>-<python-version>
#
#################################################################################################################################

name: Run test items via PyTest

on:
  workflow_call:
    inputs:
      test_type:
        description: "The testing type. In generally, it only has 2 options: 'unit-test' and 'integration-test'."
        required: true
        type: string
      all_test_items_paths:
        description: "The target paths of test items under test."
        required: true
        type: string
      setup_http_server:
        description: "If it's true, it would set up and run HTTP server for testing."
        type: boolean
        required: false
        default: false
      http_server_host:
        description: "The host IPv4 address of HTTP server."
        type: string
        required: false
        default: 0.0.0.0
      http_server_port:
        description: "The port number of HTTP server."
        type: string
        required: false
        default: 12345
      http_server_app_module:
        description: "The module path of HTTP server."
        type: string
        required: false
        default: app
      http_server_enter_point:
        description: "The object about the web application."
        type: string
        required: false
        default: app
      debug_mode:
        description: "For debug, so it's matrix would one has os: ubuntu-22.04 & python-version: '3.10'."
        type: boolean
        required: false
        default: false
      env_file:
        description: "The .env format file path. CI process would load and set this value in the current runtime environment to use."
        type: string
        required: false
        default: ./.github/ci-config/testing.env


jobs:
  run_test_items:
    if: ${{ inputs.debug_mode == false }}

    services:
      # Zookeeper is necessary for Kafka.
      pytest_zookeeper:
        image: zookeeper:latest
        ports:
          - 2181:2181
          - 2888:2888
          - 3888:3888
          - 7010:7010
        options: >-
          --name zookeeper
          --health-cmd="/apache-zookeeper-3.8.0-bin/bin/zkServer.sh status"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

#      # Test message queue features with Kafka
#      pytest_mq_kafka:
#        image: wurstmeister/kafka:2.13-2.7.0
#        env:
#          KAFKA_BROKER_ID: 0
#          KAFKA_ZOOKEEPER_CONNECT: 172.18.0.2:2181
#          KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://127.0.0.1:9092
#          KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
#        ports:
#          - 9092:9092
#        options: >-
#          --name kafka
#          --health-cmd="/opt/kafka_2.13-2.7.0/bin/kafka-broker-api-versions.sh --bootstrap-server 127.0.0.1:9092 --version"
#          --health-interval=10s
#          --health-timeout=10s
#          --health-retries=5
#
#      # Test message queue features with RabbitMQ
#      pytest_mq_rabbitmq:
#        image: rabbitmq:3.9.20
#        env:
#          RABBITMQ_DEFAULT_USER: user
#          RABBITMQ_DEFAULT_PASS: password
#        ports:
#          - 5671:5671
#          - 5672:5672
#          - 15672:15672
#        options: >-
#          --name rabbitmq
#          --health-cmd="rabbitmqctl status"
#          --health-interval=10s
#          --health-timeout=5s
#          --health-retries=3
#
#      # Test message queue features with ActiveMQ
#      pytest_mq_activemq:
#        image: rmohr/activemq:5.15.9
#        ports:
#          - 61613:61613
#          - 8161:8161
#        options: >-
#          --name activemq
#          --health-cmd="/opt/apache-activemq-5.15.9/bin/activemq list"
#          --health-interval=10s
#          --health-timeout=5s
#          --health-retries=3

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version: [3.6,3.7,3.8,3.9,'3.10',3.11]
        os: [ubuntu-latest,macos-latest]
#        os: [ubuntu-18.04,ubuntu-20.04,ubuntu-22.04,macos-10.15,macos-11,macos-12]
#        exclude:
##          - os: ubuntu-18.04
##            python-version: 3.7
##          - os: ubuntu-18.04
##            python-version: 3.9
##          - os: ubuntu-18.04
##            python-version: '3.10'
#          - os: ubuntu-20.04
#            python-version: 3.8
#          - os: ubuntu-20.04
#            python-version: 3.9
#          - os: ubuntu-22.04
#            python-version: 3.7
##          - os: macos-10.15
##            python-version: 3.7
##          - os: macos-10.15
##            python-version: 3.8
#          - os: macos-11
#            python-version: 3.9
#          - os: macos-12
#            python-version: 3.7
        test-path: ${{fromJson(inputs.all_test_items_paths)}}

    steps:
      - uses: actions/checkout@v3

      - name: Check the IP address of Zookeeper service is expected
        run: |
          echo "👨🏽‍🌾 Zookeeper IP address: "
          /usr/bin/docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' zookeeper
          
          echo "Start to check ... "
          bash scripts/ci/check_zookeeper-ip.sh

#      - name: Wait for the message queue system (Kafka, RabbitMQ, ActiveMQ) to be ready for running test
#        run: |
#          echo "Set environment variables ..."
#          set -o allexport
#          source ${{ inputs.env_file }}
#          echo "PYTEST_TARGET_URL_DOMAIN - $PYTEST_TARGET_URL_DOMAIN"
#          echo "PYTEST_KAFKA_IP - $PYTEST_KAFKA_IP"
#          echo "PYTEST_RABBITMQ_HOST - $PYTEST_RABBITMQ_HOST"
#          echo "PYTEST_ACTIVEMQ_HOST - $PYTEST_ACTIVEMQ_HOST"
#          echo "✅ Set environment variables successfully!"
#
#          echo "Start to check message queue system connection ..."
#          bash scripts/ci/check_msg_sys_connection.sh 10 10

      - name: Install Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -U pip
          pip install -U -r ./requirements/requirements.txt
          pip install -U -r ./requirements/requirements-test.txt

      - name: Setup and run HTTP server for testing
        if: ${{ inputs.setup_http_server == true }}
        run: gunicorn --bind ${{ inputs.http_server_host }}:${{ inputs.http_server_port }} '${{ inputs.http_server_app_module }}:${{ inputs.http_server_enter_point }}' --daemon

      - name: Test to send HTTP request to sample HTTP server
        if: ${{ inputs.setup_http_server == true }}
        run: curl "http://${{ inputs.http_server_host }}:${{ inputs.http_server_port }}/exchangeReport/STOCK_DAY?response=json&date=20170101&stockNo=2331"

      - name: Run tests with pytest
        run: |
          echo "Set environment variables ..."
          set -o allexport
          source ${{ inputs.env_file }}
          echo "PYTEST_TARGET_URL_DOMAIN - $PYTEST_TARGET_URL_DOMAIN"
#          echo "PYTEST_KAFKA_IP - $PYTEST_KAFKA_IP"
#          echo "PYTEST_RABBITMQ_HOST - $PYTEST_RABBITMQ_HOST"
#          echo "PYTEST_ACTIVEMQ_HOST - $PYTEST_ACTIVEMQ_HOST"
          echo "✅ Set environment variables successfully!"

          echo "Start to run PyTest ..."
          pytest ${{ matrix.test-path }}
        continue-on-error: true

      - name: Rename the code coverage result file
        run: mv ./.coverage ./.coverage.${{ inputs.test_type }}.${{ matrix.os }}-${{ matrix.python-version }}

      - name: Upload code coverage result file
        uses: actions/upload-artifact@v3
        with:
          name: coverage
          path: .coverage.${{ inputs.test_type }}.${{ matrix.os }}-${{ matrix.python-version }}
          if-no-files-found: error


  run_test_items_with_debug_mode:
    if: ${{ inputs.debug_mode == true }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version: ['3.10']
        os: [ubuntu-22.04]
        test-path: ${{fromJson(inputs.all_test_items_paths)}}

    services:
      # Zookeeper is necessary for Kafka.
      pytest_zookeeper:
        image: zookeeper:latest
        ports:
          - 2181:2181
          - 2888:2888
          - 3888:3888
          - 7010:7010
        options: >-
          --name zookeeper
          --health-cmd="/apache-zookeeper-3.8.0-bin/bin/zkServer.sh status"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

      # Test message queue features with Kafka
#      pytest_mq_kafka:
#        image: wurstmeister/kafka:2.13-2.7.0
#        env:
#          KAFKA_BROKER_ID: 0
#          KAFKA_ZOOKEEPER_CONNECT: 172.18.0.2:2181
#          KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://127.0.0.1:9092
#          KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
#        ports:
#          - 9092:9092
#        options: >-
#          --name pytest_mq_kafka
#          --health-cmd="/opt/kafka_2.13-2.7.0/bin/kafka-broker-api-versions.sh --bootstrap-server 127.0.0.1:9092 --version"
#          --health-interval=10s
#          --health-timeout=10s
#          --health-retries=5
#
#      # Test message queue features with RabbitMQ
#      pytest_mq_rabbitmq:
#        image: rabbitmq:3.9.20
#        env:
#          RABBITMQ_DEFAULT_USER: user
#          RABBITMQ_DEFAULT_PASS: password
#        ports:
#          - 5671:5671
#          - 5672:5672
#          - 15672:15672
#        options: >-
#          --health-cmd="rabbitmqctl status"
#          --health-interval=10s
#          --health-timeout=5s
#          --health-retries=3
#
#      # Test message queue features with ActiveMQ
#      pytest_mq_activemq:
#        image: rmohr/activemq:5.15.9
#        ports:
#          - 61613:61613
#          - 8161:8161
#        options: >-
#          --health-cmd="/opt/apache-activemq-5.15.9/bin/activemq list"
#          --health-interval=10s
#          --health-timeout=5s
#          --health-retries=3

    steps:
      - uses: actions/checkout@v3

      - name: For debug process - Docker container ps
        run: |
          /usr/bin/docker container ps -a

      - name: Check the IP address of Zookeeper service is expected
        run: |
          echo "👨🏽‍🌾 Zookeeper IP address: "
          /usr/bin/docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' zookeeper
          
          echo "Start to check ... "
          bash scripts/ci/check_zookeeper-ip.sh

#      - name: Wait for the message queue system (Kafka, RabbitMQ, ActiveMQ) to be ready for running test
#        run: |
#          echo "Set environment variables ..."
#          set -o allexport
#          source ${{ inputs.env_file }}
#          echo "PYTEST_TARGET_URL_DOMAIN - $PYTEST_TARGET_URL_DOMAIN"
#          echo "PYTEST_KAFKA_IP - $PYTEST_KAFKA_IP"
#          echo "PYTEST_RABBITMQ_HOST - $PYTEST_RABBITMQ_HOST"
#          echo "PYTEST_ACTIVEMQ_HOST - $PYTEST_ACTIVEMQ_HOST"
#          echo "✅ Set environment variables successfully!"
#
#          echo "Start to check message queue system connection ..."
#          bash scripts/ci/check_msg_sys_connection.sh 10 10

      - name: Install Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -U pip
          pip install -U -r ./requirements/requirements.txt
          pip install -U -r ./requirements/requirements-test.txt

      - name: Setup and run HTTP server for testing
        if: ${{ inputs.setup_http_server == true }}
        run: gunicorn --bind ${{ inputs.http_server_host }}:${{ inputs.http_server_port }} '${{ inputs.http_server_app_module }}:${{ inputs.http_server_enter_point }}' --daemon

      - name: Test to send HTTP request to sample HTTP server
        if: ${{ inputs.setup_http_server == true }}
        run: curl "http://${{ inputs.http_server_host }}:${{ inputs.http_server_port }}/exchangeReport/STOCK_DAY?response=json&date=20170101&stockNo=2331"

      - name: Run tests with pytest
        run: |
          echo "Set environment variables ..."
          set -o allexport
          source ${{ inputs.env_file }}
          echo "PYTEST_TARGET_URL_DOMAIN - $PYTEST_TARGET_URL_DOMAIN"
#          echo "PYTEST_KAFKA_IP - $PYTEST_KAFKA_IP"
#          echo "PYTEST_RABBITMQ_HOST - $PYTEST_RABBITMQ_HOST"
#          echo "PYTEST_ACTIVEMQ_HOST - $PYTEST_ACTIVEMQ_HOST"
          echo "✅ Set environment variables successfully!"

          echo "Start to run PyTest ..."
          pytest ${{ matrix.test-path }}
        continue-on-error: true

      - name: Rename the code coverage result file
        run: mv ./.coverage ./.coverage.${{ inputs.test_type }}.${{ matrix.os }}-${{ matrix.python-version }}

      - name: Upload code coverage result file
        uses: actions/upload-artifact@v2
        with:
          name: coverage
          path: .coverage.${{ inputs.test_type }}.${{ matrix.os }}-${{ matrix.python-version }}
          if-no-files-found: error
